// Generated by CoffeeScript 1.3.3

/*
  backbone-articulation-backbone-relational.js 0.3.3
  (c) 2011, 2012 Kevin Malakoff.
  Backbone-Articulation-Backbone-Relational may be freely distributed under the MIT license.
  https://github.com/kmalakoff/backbone-articulation
*/


(function() {
  var Articulation, Backbone, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof require !== 'undefined') {
    try {
      _ = require('lodash');
    } catch (e) {
      _ = require('underscore');
    }
  } else {
    _ = this._;
  }

  if (_ && (_.hasOwnProperty('_'))) {
    _ = _._;
  }

  Backbone = typeof require !== 'undefined' ? require('backbone') : this.Backbone;

  Articulation = typeof require !== 'undefined' ? require('backbone-articulation') : this.Backbone.Articulation;

  if (typeof require !== 'undefined') {
    require('backbone-relational');
  }

  if (typeof exports !== 'undefined') {
    module.exports = Articulation;
  }

  Articulation.BackboneRelationalModel = Backbone.RelationalModel.extend({
    toJSON: function() {
      var index, json, model_json, rel, value, _i, _j, _len, _len1, _ref;
      if (this.isLocked()) {
        return this.id;
      }
      this.acquire();
      json = this.__bba_toJSON ? this.__bba_toJSON.call(this) : ((function() {
        throw 'Articulation.RelationalModel is not configured correctly';
      })());
      _ref = this._relations;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        rel = _ref[_i];
        value = json[rel.key];
        if (rel.options.includeInJSON === true && value && (typeof value === "object")) {
          json[rel.key] = (_.isFunction(value.toJSON) ? value.toJSON() : value);
        } else if (_.isString(rel.options.includeInJSON)) {
          if (!value) {
            json[rel.key] = null;
          } else if (value instanceof Backbone.Collection) {
            json[rel.key] = value.pluck(rel.options.includeInJSON);
          } else if (value instanceof Backbone.Model) {
            json[rel.key] = value.get(rel.options.includeInJSON);
          } else if (_.isArray(value)) {
            json[rel.key] = [];
            for (index = _j = 0, _len1 = value.length; _j < _len1; index = ++_j) {
              model_json = value[index];
              if (!_.isUndefined(model_json)) {
                json[rel.key].push(model_json[rel.options.includeInJSON]);
              }
            }
          } else if (value instanceof Object) {
            json[rel.key] = value[rel.options.includeInJSON];
          }
        } else {
          delete json[rel.key];
        }
      }
      this.release();
      return json;
    },
    _reset: function() {
      var model, _i, _len, _ref;
      if (this.models) {
        _ref = this.models;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          model = _ref[_i];
          Relational.Relational.store.unregister(model);
        }
      }
      return this.constructor.__super__.constructor.__super__._reset.apply(this, arguments);
    }
  });

  Articulation.Model.mixin(Articulation.BackboneRelationalModel);

  Articulation.BackboneRelationalCollection = (function(_super) {

    __extends(BackboneRelationalCollection, _super);

    function BackboneRelationalCollection() {
      return BackboneRelationalCollection.__super__.constructor.apply(this, arguments);
    }

    BackboneRelationalCollection.prototype.model = Articulation.BackboneRelationalModel;

    return BackboneRelationalCollection;

  })(Articulation.Collection);

}).call(this);
